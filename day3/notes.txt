** this doesn't apply anymore, but is interesting... **


// example of widening add..
//jingle_imp:
//  // h counters
//  ldr x10, =wide
//  ldr q0, [x10]
//
//  ldr x11, =wide2
//  ldr q1, [x11]
//
//  // all bytes of 1 into q2
//  movi v2.16b, #1
//
//  // widening add
//  uaddw v0.8h, v0.8h, v2.8b
//  uaddw2 v1.8h, v1.8h, v2.16b
//
//  // the result should be that each of wide and wide2 counters
//  // were increased by 1
//  umov w0, v1.8h[7]
//  ret
//
//.data
//
//wide:
//  .hword 0x1
//  .hword 0x2
//  .hword 0x3
//  .hword 0x4
//  .hword 0x5
//  .hword 0x6
//  .hword 0x7
//  .hword 0x8
//
//wide2:
//  .hword 0x8
//  .hword 0x9
//  .hword 0xA
//  .hword 0xB
//  .hword 0xC
//  .hword 0xD
//  .hword 0xE
//  .hword 0xF





read v0.16b [x1] ->

  b15                                                                             b0
q0: m1.03 m1.02 m1.01 m1.00 m0.11 m0.10 m0.09 m0.08 m0.07 m0.06 m0.05 m0.04 m0.03 m0.02 m0.01 m0.00
q1: m2.08 m2.07 m2.06 m2.05 m2.04 m2.03 m2.02 m2.01 m1.11 m1.10 m1.09 m1.08 m1.07 m1.06 m1.05 m1.04 
q3: m2.11 m2.10 m2.09




structured read

[x1] = 111000110010 111011101000 011000110010 101011101000

ld3 into q0, q1, q2

mX.b: measurement X byte b

q0 byte n: m0.0 m0.3 m0.6 m0.9   m1.0 m1.3 m1.6 m1.9   m2.0 m2.3 m2.6 m2.9   m3.0 m3.3 m3.6 m3.9

q1 byte n: m0.1 m0.4 m0.7 m0.10  m1.1 m1.4 m1.7 m1.10  m2.1 m2.4 m2.7 m2.10  m3.1 m3.4 m3.7 m3.10

q2 byte n: m0.2 m0.5 m0.8 m0.11  m1.2 m1.5 m1.8 m1.11  m2.2 m2.5 m2.8 m2.11  m3.2 m3.5 m3.8 m3.11




input could be packed in up to 4 vX.16b simd registers

1st 12 bit number v                                               v second 12 bit number start
"0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", ||  "0", "1", "1", "0"

                                            v third 12 bit number start
"1", "0", "0", "0", "1", "0", "0", "0", || "1", "0", "0", "0", "1", "0", "0", "0",  

                       v fourth 12 bit number start
"0", "0", "1", "1", || "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1",

3 registers gives us a relatively headache free layout that also happens
to divide our input number of lines (1000), so we can just do 250 loops


now we unsigned compare equal each to a 16b vector packed with the
ascii value for "1" which is 49. 

this sets each byte where there is a "1" to 255 (all 1's) and
"0" to 0 (all 0's)

meanwhile we have 12 ongoing counters for each bit position stored in 2 H
registers. like this:

v10 = bit1, bit2,  bit3,  bit4, bit5, bit6, bit7, bit8
v11 = bit9, bit10, bit11, bit12 0     0     0     0

so we need to sum our weird arrangment of 4 12 bit numbers 


/////
